################################################################################
#
# RevBayes Validation Test: Average distance matrix with exponential error model
#
# Model: We draw a time tree from the birth-death process and deterministically
#        convert it to an "average" distance matrix. (We thus assume this matrix
#        to be known without error, as we obtain it directly from the true tree
#        rather than by averaging multiple potentially conflicting time trees.)
#        For inference, we keep drawing time trees from the same birth-death
#        prior and use an exponential error model to calculate their likelihoods
#        when clamping them to the average distance matrix.
#
# authors: David Cerny
#
################################################################################

## Global settings

NUM_VALIDATION_REPLICATES = 1000
NUM_MCMC_ITERATIONS       = 10000


# create the monitor and moves vectors
moves     = VectorMoves()
monitors  = VectorMonitors()


##############
# Simulation #
##############

# Simulate a time tree from a constant-rate birth-death process. Speciation and
# extinction are fixed; root height is drawn from an exponential prior

speciation <- 0.1
extinction <- 0.09
tree_height <- 1.0
species <- simTree(4).taxa()

#############
# Inference #
#############

est_tree ~ dnBDP(lambda=speciation, mu=extinction, rootAge=tree_height, condition="nTaxa", taxa=species)

# Create some moves that operate on the inferred tree

moves.append( mvNarrow(est_tree, weight=10.0) )
moves.append( mvNNI(est_tree, weight=10.0) )
moves.append( mvFNPR(est_tree, weight=10.0) )
moves.append( mvSubtreeScale(est_tree, weight=10.0) )
moves.append( mvNodeTimeSlideUniform(est_tree, weight=15.0) )

# Calculate the distance matrix of the inferred tree

mat := fnTreePairwiseDistances(est_tree)

# Have it follow the exponential error distribution with a rate of 0.005

exp_error_dist ~ dnExponentialError(distMat=mat, lambda=0.005)

# Clamp to the data

exp_error_dist.clamp( exp_error_dist )

#########
# Model #
#########

# We define our model. We can use any node of our model as a handle;
# here we chose to use the phylogeny.

mymodel = model(est_tree)

############
# Analysis #
############

mymcmc = mcmc(mymodel, monitors, moves)

validation = validationAnalysis( mymcmc, NUM_VALIDATION_REPLICATES, directory="output_AvgDistMat_ExpError" )
validation.burnin(generations=0.1*NUM_MCMC_ITERATIONS,tuningInterval=100)
validation.run(generations=NUM_MCMC_ITERATIONS)
validation.summarize(coverageProbability=0.9)
validation.summarize(coverageProbability=0.5)

# you may want to quit RevBayes now
q()
