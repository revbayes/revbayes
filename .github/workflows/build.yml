name: Build and test

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
    - "*"

jobs:
  build:
    strategy:
      matrix:
        name: [ubuntu-gcc-6,
               ubuntu-gcc-7,
               ubuntu-gcc-8,
               ubuntu-gcc-9,
               ubuntu-gcc-9-mpi,
               ubuntu-gcc-10,
               ubuntu-clang-8,
               macos-xcode-11.7,
               windows
               ]

        include:
          - name: ubuntu-gcc-6
            os: ubuntu-18.04
            compiler: gcc
            version: "6"
            install_boost: 1.74
            mpi: false

          - name: ubuntu-gcc-7
            os: ubuntu-latest
            compiler: gcc
            version: "7"
            mpi: false

          - name: ubuntu-gcc-8
            os: ubuntu-latest
            compiler: gcc
            version: "8"
            install_boost: 1.74
            mpi: false

          - name: ubuntu-gcc-9
            os: ubuntu-latest
            compiler: gcc
            version: "9"
            mpi: false

          - name: ubuntu-gcc-9-mpi
            os: ubuntu-latest
            compiler: gcc
            version: "9"
            mpi: true

          - name: ubuntu-gcc-10
            os: ubuntu-latest
            compiler: gcc
            version: "10"
            install_boost: 1.74
            mpi: false

          - name: ubuntu-clang-8
            os: ubuntu-latest
            compiler: clang
            version: "8"
            mpi: false

          - name: macos-xcode-11.7
            os: macos-latest
            compiler: xcode
            version: "11.7"
            mpi: false
  
          - name: windows
            os: ubuntu-latest
            compiler: idk
            version: "9000"
            mpi: false


    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Install (Linux)
      if: runner.os == 'Linux' && matrix.name != 'windows'
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc libcairo2-dev ccache libopenlibm-dev
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y g++-${{ matrix.version }}
          echo "C_COMPILER=gcc-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX_COMPILER=g++-${{ matrix.version }}" >> $GITHUB_ENV
        else
          sudo apt-get install -y clang-${{ matrix.version }}
          echo "C_COMPILER=clang-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX_COMPILER=clang++-${{ matrix.version }}" >> $GITHUB_ENV
        fi
        if [ "${{ matrix.mpi }}" = true ] ; then
          sudo apt-get install libopenmpi-dev
        fi

    - name: Install (macOS)
      if: runner.os == 'macOS'
      run: |
          rm -rf /usr/local/bin/2to3 
          
          brew update
          brew install pkg-config pandoc boost ccache coreutils openlibm
          sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
          ccache --set-config=cache_dir=$HOME/.ccache

    - name: Install (Windows meson cross compile)
      if: matrix.name == 'windows'
      run: |
          sudo apt-get update
          sudo apt-get install -y pandoc libcairo2-dev ccache dos2unix zstd
          sudo apt-get install git python3-setuptools python3-pip g++-mingw-w64 wine64
          sudo -H pip3 install meson
          sudo -H pip3 install ninja

    # Caches for different branches are isolated, so we don't need to put the branch name into the key.
    # The total size for all caches in a repository is 5Gb.

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      run: |
        if [ "$RUNNER_OS" = "Linux" ] ; then
          stamp=$(date '+%s')
        else
          stamp=$(gdate '+%s')
        fi
        echo "${stamp}"
        echo "::set-output name=timestamp::${stamp}"

    - name: ccache cache files
#      uses: actions/cache@v2
#     We want to cache the build artifacts whether or not the tests succeed.
      uses: pat-s/always-upload-cache@v2
      with:
         path: ~/.ccache
         key: ${{ matrix.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
         restore-keys: |
           ${{ matrix.name }}-ccache-

    - name: Install BOOST (Linux)
      if: runner.os == 'Linux' && matrix.name != 'windows'
      run: |
        # Don't use weird boost version installed by github actions.
        sudo rm -rf /usr/local/share/boost

        # Maybe install a particular boost version.
        if [ -n "${{ matrix.install_boost }}" ] ; then
          sudo apt-get remove libboost-all-dev
          sudo add-apt-repository ppa:mhier/libboost-latest
          sudo apt-get update
          sudo apt-get install -y libboost${{ matrix.install_boost }}-dev
        else
          sudo apt-get install -y libboost-all-dev
        fi

    - name: Install BOOST and set up build (Windows meson cross compile)
      if: matrix.name == 'windows'
      env:
        USE_MPI: ${{ matrix.mpi }}
      run: |
        ${GITHUB_WORKSPACE}/projects/meson/make_winroot.sh -ccache true
        ( cd ${GITHUB_WORKSPACE}/projects/meson/ ; ./generate.sh )
        
    - name: Update submodules
      run: |
        git submodule update --init --recursive
        
    - name: Configure and build
      if: matrix.name != 'windows'
      env:
        USE_MPI: ${{ matrix.mpi }}
      run: |
        cd projects/cmake
        ./build.sh -travis true

    - name: Configure and build (Windows meson cross compile)
      if: matrix.name == 'windows'
      env:
        BOOST_INCLUDEDIR: /home/runner/win_root/mingw64/include/boost
        BOOST_LIBRARYDIR: /home/runner/win_root/mingw64/lib
      run: |
        /usr/local/bin/meson build ${GITHUB_WORKSPACE} --prefix=${GITHUB_WORKSPACE}/wincrossbuild --cross-file=win64-cross.txt
        /usr/local/bin/ninja -C build install
        cp /usr/lib/gcc/x86_64-w64-mingw32/*-win32/libgcc_s_seh-1.dll ${GITHUB_WORKSPACE}/wincrossbuild/bin
        cp /usr/lib/gcc/x86_64-w64-mingw32/*-win32/libstdc++-6.dll ${GITHUB_WORKSPACE}/wincrossbuild/bin
        cp /home/runner/win_root/mingw64/bin/libboost_*.dll ${GITHUB_WORKSPACE}/wincrossbuild/bin
        cp /home/runner/win_root/mingw64/bin/libwinpthread-1.dll ${GITHUB_WORKSPACE}/wincrossbuild/bin
        cp /home/runner/win_root/mingw64/bin/libopenlibm.dll ${GITHUB_WORKSPACE}/wincrossbuild/bin
        echo '#!/bin/bash' > ${GITHUB_WORKSPACE}/wincrossbuild/bin/rb
        echo 'cp ${GITHUB_WORKSPACE}/wincrossbuild/bin/* .' >> ${GITHUB_WORKSPACE}/wincrossbuild/bin/rb
        echo 'if [ "$#" -gt "1" ]; then' >> ${GITHUB_WORKSPACE}/wincrossbuild/bin/rb
        echo 'wine64 rb.exe ${@:1:$#-1} $(winepath -w ${@: -1} | sed "s,\\\\,\\\\\\\\,g")' >> ${GITHUB_WORKSPACE}/wincrossbuild/bin/rb
        echo 'else' >> ${GITHUB_WORKSPACE}/wincrossbuild/bin/rb
        echo 'wine64 rb.exe $(winepath -w ${1} | sed "s,\\\\,\\\\\\\\,g")' >> ${GITHUB_WORKSPACE}/wincrossbuild/bin/rb
        echo 'fi' >> ${GITHUB_WORKSPACE}/wincrossbuild/bin/rb
        echo 'rm -f *.exe' >> ${GITHUB_WORKSPACE}/wincrossbuild/bin/rb
        echo 'rm -f *.dll' >> ${GITHUB_WORKSPACE}/wincrossbuild/bin/rb
        chmod +x ${GITHUB_WORKSPACE}/wincrossbuild/bin/rb
    - name: Test
      env:
        USE_MPI: ${{ matrix.mpi }}
        IS_WINDOWS: ${{ matrix.name == 'windows' }}
      run: |
        if [ "${{ matrix.name }}" = "windows" ] ; then
          export PATH=${GITHUB_WORKSPACE}/wincrossbuild/bin:$PATH
        else
          export PATH=${GITHUB_WORKSPACE}/projects/cmake:$PATH
        fi
        echo "\"Hello World\"" | rb
        echo ::group::Test suite
        cd tests
        ./run_integration_tests.sh -mpi ${USE_MPI} -windows ${IS_WINDOWS} rb
        cd
        echo ::endgroup::
        echo ::group::testiphy
        git clone https://gitlab.com/testiphy/testiphy.git
        cd testiphy
        ./testiphy rb
        echo ::endgroup::

    - name: Upload test files if they failed
      uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: test-results-${{ matrix.name }}
        path: tests

    - name: Upload testiphy files if they failed
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: testiphy-results-${{ matrix.name }}
        path: '~/testiphy'

  notify:
    name: Notify Slack
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - uses: technote-space/workflow-conclusion-action@v2.0.1
    - uses: 8398a7/action-slack@v3.8.1
      with:
        status: custom
        fields: workflow,commit,repo,ref,author
        custom_payload: |
          {
            username: 'action-slack',
            attachments: [{
              color: '${{ env.WORKFLOW_CONCLUSION }}' === 'success' ? 'good' : '${{ env.WORKFLOW_CONCLUSION }}' === 'failure' ? 'danger' : 'warning',
              text: `${process.env.AS_WORKFLOW} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR}: ${{ env.WORKFLOW_CONCLUSION }}`,
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
