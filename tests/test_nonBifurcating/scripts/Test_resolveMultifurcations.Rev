#################################################################################
#
# RevBayes Test-Script: Stochastically resolving multifurcations in branch length
#                       trees and time trees, either at the root or elsewhere
#
# authors: David Cerny
#
#################################################################################

seed(12345)

print("========================================")
print("Resolving multifurcations in a time tree")
print("========================================\n")

tt <- readTrees("data/multifurcating_time_tree.tre")[1]
tt_copy <- tt
print( "\n   Tree type: " + type(tt) )
print( "   The tree has " + tt.ntips() + " tips and " + (tt.nnodes() - tt.ntips()) + " internal nodes." )
print( "   Is the tree binary? " + ifelse( tt.isBinary(), "TRUE", "FALSE") + "\n" )

print( "Resolving all multifurcations...\n" )
tt.resolveMultifurcations(resolveRoot=TRUE)
print( "   The modified tree has " + tt.ntips() + " tips and " + (tt.nnodes() - tt.ntips()) + " internal nodes." )
print( "   Is the modified tree binary? " + ifelse( tt.isBinary(), "TRUE", "FALSE") + "\n" )
writeNexus(filename="output/time_tree_all_resolved.nex", tt)

print( "Resolving multifurcations except at the root...\n" )
tt_copy.resolveMultifurcations(resolveRoot=FALSE)
print( "   The modified tree has " + tt_copy.ntips() + " tips and " + (tt_copy.nnodes() - tt_copy.ntips()) + " internal nodes." )
print( "   Is the modified tree binary? " + ifelse( tt_copy.isBinary(), "TRUE", "FALSE") + "\n" )
writeNexus(filename="output/time_tree_all_but_root_resolved.nex", tt_copy)

print("=================================================")
print("Resolving multifurcations in a branch length tree")
print("=================================================\n")

blt <- readTrees("data/multifurcating_branch_length_tree.tre", treetype="non-clock")[1]
blt_copy <- blt
print( "\n   Tree type: " + type(blt) )
print( "   The tree has " + blt.ntips() + " tips and " + (blt.nnodes() - blt.ntips()) + " internal nodes." )
print( "   Is the tree binary? " + ifelse( blt.isBinary(), "TRUE", "FALSE") + "\n" )

print( "Resolving all multifurcations...\n" )
blt.resolveMultifurcations(resolveRoot=TRUE)
print( "   The modified tree has " + blt.ntips() + " tips and " + (blt.nnodes() - blt.ntips()) + " internal nodes." )
print( "   Is the modified tree binary? " + ifelse( blt.isBinary(), "TRUE", "FALSE") + "\n" )
writeNexus(filename="output/branch_length_tree_all_resolved.nex", blt)

print( "Resolving multifurcations except at the root...\n" )
blt_copy.resolveMultifurcations(resolveRoot=FALSE)
print( "   The modified tree has " + blt_copy.ntips() + " tips and " + (blt_copy.nnodes() - blt_copy.ntips()) + " internal nodes." )
print( "   Is the modified tree binary? " + ifelse( blt_copy.isBinary(), "TRUE", "FALSE") )
writeNexus(filename="output/branch_length_tree_all_but_root_resolved.nex", blt_copy)

clear()

q()