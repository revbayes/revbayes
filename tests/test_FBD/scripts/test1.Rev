################################################################################
#
# RevBayes Example: Total-evidence dating under the fossilized birth-death model
# 
# This file: Runs the full MCMC ...
#
# authors: Tracy A. Heath, Walker C. Pett, April M. Wright
#
################################################################################
seed(1236)
#######################
# Reading in the Data #
#######################
# Create the full list of taxa (including all fossils and extant species #
taxa <- readTaxonData("data/taxa1.tsv")

# Import the molecular sequences #
# this file contains only the taxa for which sequence data are available #
cytb <- readDiscreteCharacterData("data/sim2.fasta")

## helpers
n_taxa <- taxa.size()

moves = VectorMoves()

# Load the model files

##########################################################################################
# Joint Fossilized Birth-Death Process prior on the topology and fossil occurrence times #
##########################################################################################

# Define exponential priors on the birth rate and death rate #
speciation_rate = 0.1
extinction_rate = 0.001

# Create deterministic nodes for the diversification and turnover rates so that they can be monitored #
diversification := speciation_rate - extinction_rate
turnover := extinction_rate/speciation_rate

# Fix the probability of sampling parameter (rho) to 1, #
# because all extant bears are represented in this analysis #
rho <- 1.0

# Assume an exponential prior on the rate of sampling fossils (psi) #
psi ~ dnExponential(10) 

# Specify a scale move on the psi parameter #
# This move will be applied with 3 different tuning values (lambda) to help improve mixing # 
moves.append( mvScale(psi, lambda=0.01, weight=1) )
moves.append( mvScale(psi, lambda=0.1,  weight=1) )
moves.append( mvScale(psi, lambda=1,    weight=1) )

# The FBD is conditioned on a starting time for the process, which is the origin time #
# Specify a uniform prior on the origin #
origin_time ~ dnUnif(1, 3)

# Specify a sliding-window move on the origin_time parameter #
# This move will be applied with 3 different window widths (delta) to help improve mixing # 
moves.append( mvSlide(origin_time, delta=0.01, weight=5.0) )
moves.append( mvSlide(origin_time, delta=0.1,  weight=5.0) )
moves.append( mvSlide(origin_time, delta=1,    weight=5.0) )


### Define the tree-prior distribution as the fossilized birth-death process ###
fbd_tree ~ dnBDSTP(origin=origin_time, lambda=speciation_rate, mu=extinction_rate, r=0, psi=psi, rho=rho, taxa=taxa)

# Specify moves on the tree and node times #
# These moves update the tree topology 
moves.append( mvFNPR(fbd_tree, weight=15.0) )
moves.append( mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0) )

# These moves update the node ages #
# Because we are conditioning on the origin time, we must also sample the root node age #
moves.append( mvNodeTimeSlideUniform(fbd_tree, weight=40.0) )
moves.append( mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0) )

### Create deterministic nodes to monitor various tree statistics ###
# Monitor the number of sampled ancestors in the FBD-tree #
num_samp_anc := fbd_tree.numSampledAncestors();

#####################################
# GTR+G nucleotide substitution model #
#####################################

# Create the matrix #
Q := fnJC(4)

### Create the substitution model and clamp with our observed DNA data ###
phySeq ~ dnPhyloCTMC(tree=fbd_tree, Q=Q, type="DNA")
phySeq.clamp(cytb)


########
# MCMC #
########

# initialize the model object #
mymodel = model(phySeq)

monitors = VectorMonitors()

# Create a vector of monitors #
# 1. for the full model #
monitors.append( mnModel(filename="output/test1.log", printgen=10) )

# 2. the tree #
monitors.append( mnFile(filename="output/test1.trees", printgen=10, fbd_tree) )

# 3. and a few select parameters to be printed to the screen #
monitors.append( mnScreen(printgen=10, num_samp_anc, origin_time) )

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves)

# Run the MCMC #
mymcmc.run(generations=300)

# Load the tree trace
trace = readTreeTrace("output/test1.trees", treetype="clock")

# Maximum clade credibility tree #
consensusTree(trace, file="output/test1.con.tre" )
mapTree(trace, file="output/test1.map.tre" )
mccTree(trace, file="output/test1.mcc.tre" )

# Quit RevBayes #
q()
