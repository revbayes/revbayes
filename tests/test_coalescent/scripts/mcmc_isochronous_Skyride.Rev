##########################################################################################
#
# RevBayes Example: Coalescent Skyride process applied to isochronous horse sequence data
#
# authors: Sebastian Hoehna, Ronja Billenstein
#
##########################################################################################

## Global settings
seed(1234)

NUM_REPLICATES      = 2
NUM_MCMC_ITERATIONS = 10
THINNING            = 1

# create the monitor and moves vectors
moves     = VectorMoves()
monitors  = VectorMonitors()

#######################
# Reading in the Data #
#######################

# Read in sequence data
sequences <- readDiscreteCharacterData("data/horses_isochronous_sequences.fasta")
taxa <- sequences.taxa()

# Get the number of taxa. We need it later on.
n_taxa <- taxa.size()


##############
# Tree model #
##############

ESTIMATED_ROOT_AGE <- 375000

NUM_INTERVALS = n_taxa - 1

tau ~ dnGamma(0.001,0.001)
moves.append( mvScale(tau, lambda=0.1, tune=true, weight=2.0) )

sd := 1.0 / sqrt( tau )

ln_pop_size[1] ~ dnUniform(ln(1E-2),ln(1E8))
ln_pop_size[1].setValue( ln(ESTIMATED_ROOT_AGE/2) )
pop_size[1] := exp( ln_pop_size[1] )
moves.append( mvSlide(ln_pop_size[1], delta=0.1, tune=true, weight=2.0) )

num_events[1] <- 1

for (i in 2:NUM_INTERVALS) {

    ln_pop_size[i] ~ dnNormal( ln_pop_size[i-1], sd )
    ln_pop_size[i].setValue( ln(ESTIMATED_ROOT_AGE/2) )
    pop_size[i] := exp( ln_pop_size[i] )

    moves.append( mvSlide(ln_pop_size[i], delta=0.1, tune=true, weight=2.0) )

    num_events[i] <- 1

}


### the time tree is a stochastic node modeled by the coalescent skyline process (dnCoalescentSkyline)
psi ~ dnCoalescentSkyline(theta=pop_size, events_per_interval=num_events, method="events", taxa=taxa)

root_age := psi.rootAge()

diff <- (500000 - 250000)/2.0
obs_root_age ~ dnNormal(mean = root_age, sd = 60000, min = root_age - diff, max = root_age + diff)
obs_root_age.clamp(375000)

interval_times := psi.getIntervalAges()

### add some moves that change the tree
moves.append( mvNarrow(psi, weight=n_taxa) )
moves.append( mvNNI(psi, weight=n_taxa) )
moves.append( mvFNPR(psi, weight=n_taxa/4.0) )
moves.append( mvSubtreeScale(psi, weight=n_taxa/5.0) )
moves.append( mvNodeTimeSlideUniform(psi, weight=n_taxa) )
moves.append( mvRootTimeScaleBactrian(psi, weight=n_taxa/5.0) )
moves.append( mvTreeScale(psi, weight=n_taxa/5.0) )

#############
# Sequences #
#############

er_prior <- v(1,1,1,1,1,1)
pi_prior <- v(1,1,1,1)
er ~ dnDirichlet(er_prior)
pi ~ dnDirichlet(pi_prior)

moves.append( mvBetaSimplex(er, weight=3) )
moves.append( mvDirichletSimplex(er, weight=1) )
moves.append( mvBetaSimplex(pi, weight=2) )
moves.append( mvDirichletSimplex(pi, weight=1) )

Q := fnGTR(er,pi)

alpha ~ dnUniform( 0.0, 1E6 )
alpha.setValue( 1.0 )
sr := fnDiscretizeGamma( alpha, alpha, 4 )
moves.append( mvScale(alpha, weight=2.0) )

p_inv ~ dnBeta(1,1)
moves.append( mvSlide(p_inv) )

clock ~ dnLoguniform(1e-12,1e-4)
clock.setValue(4.68e-8)
moves.append( mvScale(clock, weight=2.0) )

up_down_move = mvUpDownScale(weight=5.0)
up_down_move.addVariable(clock,up=TRUE)
up_down_move.addVariable(psi,up=FALSE)
moves.append( up_down_move )

seq ~ dnPhyloCTMC(tree=psi, Q=Q, siteRates=sr, pInv=p_inv, type="DNA", branchRates=clock)
seq.clamp(sequences)


#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(psi)



################
# The Analysis #
################

#add monitors
monitors.append( mnModel(filename="output/horses_iso_Skyride.log",printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_iso_Skyride.trees",psi,printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_iso_Skyride_NEs.log",pop_size,printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_iso_Skyride_times.log",interval_times,printgen=THINNING) )

mymcmc = mcmc(mymodel, monitors, moves, nruns=NUM_REPLICATES, combine="mixed")
mymcmc.run(NUM_MCMC_ITERATIONS, tuning = 100)

mymcmc.operatorSummary()

################

# you may want to quit RevBayes now
q()
