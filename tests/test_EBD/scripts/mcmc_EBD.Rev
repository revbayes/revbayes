################################################################################
#
# RevBayes Script: Bayesian inference of diversification rates under a
#                   conditioned birth-death-shift model
#
#
# authors: Sebastian Hoehna
#
################################################################################

seed(12345)

#######################
# Reading in the Data #
#######################

dataset = "primates"

# Read in the observed phylogeny
observed_phylogeny <- readTrees("data/"+dataset+".tree")[1]

# Get the names of the taxa in the tree and the age of the tree. We need these later on.
taxa <- observed_phylogeny.taxa()

# set my move index
mvi = 0
mni = 0

NUM_INTERVALS = 10


####################
# Create the rates #
####################

# first we create the standard deviation of the rates between intervals
# draw the sd from an exponential distribution
speciation_sd ~ dnExponential(1.0)
moves[++mvi] = mvScale(speciation_sd,weight=10.0)

extinction_sd ~ dnExponential(1.0)
moves[++mvi] = mvScale(extinction_sd,weight=10.0)


# create a random variable at the present time
log_speciation[1] ~ dnUniform(-10.0,10.0)
log_extinction[1] ~ dnUniform(-10.0,10.0)


# apply moves on the rates
moves[++mvi] = mvSlide(log_speciation[1], weight=5)
moves[++mvi] = mvSlide(log_extinction[1], weight=5)


speciation[1] := exp( log_speciation[1] )
extinction[1] := exp( log_extinction[1] )


for (i in 1:NUM_INTERVALS) {
    index = i+1
    
    # specify normal priors (= Brownian motion) on the log of the rates
    log_speciation[index] ~ dnNormal( mean=log_speciation[i], sd=speciation_sd )
    log_extinction[index] ~ dnNormal( mean=log_extinction[i], sd=extinction_sd )

    # apply moves on the rates
    moves[++mvi] = mvSlide(log_speciation[index], weight=5)
    moves[++mvi] = mvSlide(log_extinction[index], weight=5)

    # transform the log-rate into actual rates
    speciation[index] := exp( log_speciation[index] )
    extinction[index] := exp( log_extinction[index] )

}

moves[++mvi] = mvVectorSlide(log_speciation, weight=20)
moves[++mvi] = mvVectorSlide(log_extinction, weight=20)

moves[++mvi] = mvShrinkExpand( log_speciation, sd=speciation_sd, weight=20 )
moves[++mvi] = mvShrinkExpand( log_extinction, sd=extinction_sd, weight=20 )


interval_times <- observed_phylogeny.rootAge() * (1:NUM_INTERVALS) / (NUM_INTERVALS) * 0.8


rho <- 1.0


timetree ~ dnEpisodicBirthDeath(rootAge=observed_phylogeny.rootAge(), lambdaRates=speciation, lambdaTimes=interval_times, muRates=extinction, muTimes=interval_times, rho=rho, samplingStrategy="uniform", condition="survival", taxa=taxa)

### clamp the model with the "observed" tree
timetree.clamp(observed_phylogeny)



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rho)

### set up the monitors that will output parameter values to file and screen 
monitors[++mni] = mnModel(filename="output/EBD.log",printgen=1, separator = TAB)
monitors[++mni] = mnFile(filename="output/EBD_speciation_rates.log",printgen=1, separator = TAB, speciation)
monitors[++mni] = mnFile(filename="output/EBD_speciation_times.log",printgen=1, separator = TAB, interval_times)#
monitors[++mni] = mnFile(filename="output/EBD_extinction_rates.log",printgen=1, separator = TAB, extinction)
monitors[++mni] = mnFile(filename="output/EBD_extinction_times.log",printgen=1, separator = TAB, interval_times)



################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves)

### pre-burnin to tune the proposals ###
#mymcmc.burnin(generations=10000,tuningInterval=100)

### run the MCMC ###
mymcmc.run(generations=20)



## quit ##
q()
