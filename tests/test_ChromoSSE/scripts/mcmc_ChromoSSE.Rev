
#
# ChromoSSE: Cladogenetic and Anagenetic Phylogenetic Models of Chromosome Number Evolution
#
# Will Freyman, UC Berkeley
# freyman@berkeley.edu
# http://willfreyman.org
#
#
# This script sets up and runs a short ChromoSSE test analysis for the Aristolochia dataset.
#

seed(12345)
setOption("useScaling","false")

# get data
psi <- readTrees("data/aristolochia.tree")[1]
max_chromo = 18
chromo_data = readCharacterDataDelimited("data/aristolochia_chromosome_count.tsv", stateLabels=(max_chromo + 1), type="NaturalNumbers", delimiter="\t", header=FALSE)


# some useful variables
ana_events = 2
rho_bd = 1.0
mcmc_iterations = 10
sample_freq = 1
mi = 1


# anagenetic changes: set up transition rates for each type of chromosome change
t_len <- psi.treeLength()
rate_pr <- t_len / ana_events

gamma ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(rate_pr), p=0.5)
delta ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(rate_pr), p=0.5)
rho ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(rate_pr), p=0.5)
eta ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(rate_pr), p=0.5)
gamma_l ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnUniform(-3/max_chromo, 3/max_chromo), p=0.5)
delta_l ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnUniform(-3/max_chromo, 3/max_chromo), p=0.5)

R := fnChromosomes(max_chromo, gamma, delta, rho, eta, gamma_l, delta_l)

moves[mi++] = mvScale(gamma, lambda=1.0, weight=1)
moves[mi++] = mvScale(delta, lambda=1.0, weight=1)
moves[mi++] = mvScale(rho, lambda=1.0, weight=1)
moves[mi++] = mvScale(eta, lambda=1.0, weight=1)

moves[mi++] = mvRJSwitch(gamma, weight=1)
moves[mi++] = mvRJSwitch(delta, weight=1)
moves[mi++] = mvRJSwitch(rho, weight=1)
moves[mi++] = mvRJSwitch(eta, weight=1)
moves[mi++] = mvRJSwitch(gamma_l, weight=1)
moves[mi++] = mvRJSwitch(delta_l, weight=1)


# cladogenetic changes: set up speciation rates for each cladogenetic event type
taxa <- psi.taxa()
speciation_mean <- ln( taxa.size() ) / psi.rootAge()
speciation_pr <- 1 / speciation_mean

clado_no_change ~ dnExponential(speciation_pr)
clado_fission ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential( speciation_pr * 100 ), p=0.5)
clado_fusion ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential( speciation_pr * 100 ), p=0.5)
clado_polyploid ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential( speciation_pr * 100 ), p=0.5)
clado_demipoly ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential( speciation_pr * 100 ), p=0.5)

moves[mi++] = mvScale(clado_no_change, lambda=5.0, weight=1)
moves[mi++] = mvScale(clado_fission, lambda=5.0, weight=1)
moves[mi++] = mvScale(clado_fusion, lambda=5.0, weight=1)
moves[mi++] = mvScale(clado_polyploid, lambda=5.0, weight=1)
moves[mi++] = mvScale(clado_demipoly, lambda=5.0, weight=1)

moves[mi++] = mvRJSwitch(clado_fission, weight=1)
moves[mi++] = mvRJSwitch(clado_fusion, weight=1)
moves[mi++] = mvRJSwitch(clado_polyploid, weight=1)
moves[mi++] = mvRJSwitch(clado_demipoly, weight=1)

speciation_rates := [clado_no_change, clado_fission, clado_fusion, clado_polyploid, clado_demipoly]
total_speciation := sum(speciation_rates)


clado_matrix := fnChromosomesCladoEventsBD(speciation_rates, max_chromo)

# a stochastic variable to represent the turnover
turnover ~ dnUniform(0, 1.0)
moves[mi++] = mvScale(turnover, lambda=5.0, weight=3.0)

# make a vector of extinction rates for each state
for (i in 1:(max_chromo + 1)) {
    extinction[i] := turnover * total_speciation
}


# root frequencies
root_frequencies_prior <- rep(1, max_chromo + 1)
root_frequencies ~ dnDirichlet(root_frequencies_prior)
moves[mi++] = mvBetaSimplex(root_frequencies, alpha=0.5, weight=5)
moves[mi++] = mvElementSwapSimplex(root_frequencies, weight=5)


# construct a variable for the tree and chromosomes drawn from a
# cladogenetic character state dependent birth death process
chromotree ~ dnCDCladoBDP( rootAge            = psi.rootAge(),
                           cladoEventMap      = clado_matrix,
                           extinctionRates    = extinction,
                           Q                  = R,
                           delta              = 1.0,
                           pi                 = root_frequencies,
                           rho                = rho_bd,
                           condition          = "time")


# and clamp tree and the chromosome counts data
chromotree.clamp(psi)
chromotree.clampCharData(chromo_data)

chromotree.lnProbability()

# set up monitors and run MCMC
monitors[1] = mnFile(filename="output/mcmc_ChromoSSE.out", printgen=sample_freq, clado_demipoly, clado_fission, clado_fusion, clado_no_change, clado_polyploid, delta, delta_l, eta, gamma, gamma_l, root_frequencies, turnover)

mymodel = model(chromotree)

mymcmc = mcmc(mymodel, monitors, moves, moveschedule="single")
mymcmc.run(generations=mcmc_iterations)

setOption("useScaling","true")

q()
