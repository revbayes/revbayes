################################################################################
#
# RevBayes Validation Test: dnInverse
#
# These tests validate the behaviour of dnInverse()
#
#
# Authors: Martin R. Smith
#
################################################################################

seed(42)

exp ~ dnExp(1)
exp.clamp(42)

inv_exp ~ dnInv(dnExp(1))
inv_exp.clamp(42)
print("Expect: 42", -exp.lnProbability(), inv_exp.lnProbability())

exp.clamp(21)
inv_exp.clamp(21)
print("Expect: 21", -exp.lnProbability(), inv_exp.lnProbability())

chars <- readDiscreteCharacterData("../validation/data/bears.nex")

taxa <- chars.names()
n_taxa <- chars.size()
n_edge <- 2 * n_taxa - 3

topology ~ dnUniformTopology(taxa)
br_lengths ~ dnDirichlet( rep(1.0, n_edge) )
phylogeny := treeAssembly(topology, br_lengths)

k ~ dnUniform(1, 10)
kRates := [ [ 0, k],
            [ 1, 0] ]
qK := fnFreeK(kRates)
phy ~ dnPhyloCTMC(tree = phylogeny, Q = qK, type = "Standard")
phy.clamp(chars)

invPhy ~ dnInv(dnPhyloCTMC(tree = phylogeny, Q = qK, type = "Standard"))
invPhy.clamp(chars)
invPhy

k.clamp(1)
print(k, "Expect equal:", -phy.lnProbability(), invPhy.lnProbability())
k.clamp(5)
print(k, "Expect equal:", -phy.lnProbability(), invPhy.lnProbability())
k.clamp(6)
print(k, "Expect equal:", -phy.lnProbability(), invPhy.lnProbability())
k.clamp(16)
print(k, "Expect equal:", -phy.lnProbability(), invPhy.lnProbability())
