################################################################################
#
# RevBayes Test-Script: Constructing and subsetting an average distance matrix
#
#
# authors: David Cerny
#
################################################################################

seed(12345)

################################################################################
# Create a 5-by-5 average distance matrix from two 4-tip source trees with 
# partially overlapping taxon sets
################################################################################

speciation <- 0.1
extinction <- 0.09
tree_height <- 1.0

taxa1 <- [taxon("A"), taxon("B"), taxon("C"), taxon("D")]
taxa2 <- [taxon("B"), taxon("C"), taxon("D"), taxon("E")]

tree1 ~ dnBDP(lambda=speciation, mu=extinction, rootAge=tree_height, condition="nTaxa", taxa=taxa1)
tree2 ~ dnBDP(lambda=speciation, mu=extinction, rootAge=tree_height, condition="nTaxa", taxa=taxa2)

distMatrices[1] := fnTreePairwiseDistances(tree1)
distMatrices[2] := fnTreePairwiseDistances(tree2)

# Important: make this a constant rather than deterministic node if you want to
# run .ultrametricImputation()

ADM <- fnAverageDistanceMatrix(distMatrices)

print(filename = "output/Test_avgDistMat.txt", append = FALSE,
      "Print the average distance matrix:\n")
print(filename = "output/Test_avgDistMat.txt", append = TRUE, ADM)

print(filename = "output/Test_avgDistMat.txt", append = TRUE, "Print the element in row 4, column 1:\n")
print(filename = "output/Test_avgDistMat.txt", append = TRUE, ADM.getElement(4, 1))
print(filename = "output/Test_avgDistMat.txt", append = TRUE, "\n\n")

dm := ADM.distanceMatrix().matrix()
msk := ADM.mask()

print(filename = "output/Test_avgDistMat.txt", append = TRUE, "Print the underlying distance matrix:\n")
print(filename = "output/Test_avgDistMat.txt", append = TRUE, dm)
print(filename = "output/Test_avgDistMat.txt", append = TRUE, "\n\n")

print(filename = "output/Test_avgDistMat.txt", append = TRUE, "Print the Boolean mask indicating which distances to include in further calculations:\n")
print(filename = "output/Test_avgDistMat.txt", append = TRUE, msk)
print(filename = "output/Test_avgDistMat.txt", append = TRUE, "\n\n")

print(filename = "output/Test_avgDistMat.txt", append = TRUE, "Calculate matrix completeness as the proportion of non-missing ('T' or diagonal) entries:\n")
print(filename = "output/Test_avgDistMat.txt", append = TRUE, ADM.completeness())
print(filename = "output/Test_avgDistMat.txt", append = TRUE, "\n\n")

print(filename = "output/Test_avgDistMat.txt", append = TRUE, "Extract the 1st column of the underlying distance matrix:\n")
print(filename = "output/Test_avgDistMat.txt", append = TRUE, dm[1])
print(filename = "output/Test_avgDistMat.txt", append = TRUE, "\n\n")

print(filename = "output/Test_avgDistMat.txt", append = TRUE, "Extract the 1st column of the Boolean mask:\n")
print(filename = "output/Test_avgDistMat.txt", append = TRUE, msk[1])
print(filename = "output/Test_avgDistMat.txt", append = TRUE, "\n\n")

print(filename = "output/Test_avgDistMat.txt", append = TRUE, "Impute missing entries using the 3-point condition satisfied by ultrametric distances.")

ADM.ultrametricImputation()

print(filename = "output/Test_avgDistMat.txt", append = TRUE, "\n\n")
print(filename = "output/Test_avgDistMat.txt", append = TRUE, "Print the new matrix:\n")
print(filename = "output/Test_avgDistMat.txt", append = TRUE, ADM)

print(filename = "output/Test_avgDistMat.txt", append = TRUE, "Recalculate matrix completeness:\n")
print(filename = "output/Test_avgDistMat.txt", append = TRUE, ADM.completeness())
clear()

q()
