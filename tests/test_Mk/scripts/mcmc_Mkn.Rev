clear()
seed(54321)

####################
# read the data #
# NB at present, the Nexus FORMAT SYMBOLS command must define a 'spare' symbol 
# for each state used in the model, even if not present in the matrix.
# The bitsets (in TaxaState.h) only include entries for defined states.
data <- readDiscreteCharacterData("../tests/data/discrete.nex")
taxa <- data.taxa()

# global variables
n_taxa <- taxa.size()
relabelled <- data.relabelStates()
# TODO non-ambiguous data not printed
write(relabelled[3])
relabelled[3].show()

# vector for the moves and monitors
moves    = VectorMoves()
monitors = VectorMonitors()

# topology
topology ~ dnUniformTopology(taxa)

moves.append( mvNNI(topology) )
moves.append( mvSPR(topology) )

# branch lengths
n_branches <- 2 * n_taxa - 3
for (i in 1:n_branches) {
   br_lens[i] ~ dnExponential(10.0)
   moves.append( mvScale(br_lens[i]) )
}

# tree length
TL := sum(br_lens)

phylogeny := treeAssembly(topology, br_lens)

partition_vector <- relabelled.getObsStatesVector()
partition_vector[1].show()

# loop over the characters by num observed states #
for (pv in 3:6) {
    i = pv - 2;
    k_obs = i + 1;
    Q[i] := fnJC(k_obs + 1) # Mk + 1 model
    
    # create the substitution model
    seq_informative[i] ~ dnPhyloCTMC(tree = phylogeny, Q = Q[i], type = "Standard", coding = "nstates")

    # clamp with observed data
    partition_vector[pv].removeExcludedCharacters() # Reduce memory footprint; see #552
    pv
    partition_vector[pv]
    seq_informative[i].clamp(partition_vector[pv])
}

mymodel = model(phylogeny)

############
# run MCMC #

# some minitors
monitors.append( mnScreen(printgen=1) )
monitors.append( mnModel(filename="output/Mkn.log", printgen=1) )
monitors.append( mnFile(filename="output/Mkn.trees", printgen=1, phylogeny) )

# initialize the MCMC object
mymcmc = mcmc(mymodel, moves, monitors)

# run the MCMC
mymcmc.run(generations=10)

#################
# quit RevBayes #
stoq()
