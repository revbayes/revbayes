/**
 * @file
 * This file contains the implementation of RateMatrix_MtRev24, which is
 * class that holds a rate matrix in RevBayes.
 *
 * @brief Implementation of RateMatrix_MtRev24
 *
 * (c) Copyright 2009- under GPL version 3
 * @date Last modified: $Date: 2012-12-11 14:46:24 +0100 (Tue, 11 Dec 2012) $
 * @author The RevBayes Development Core Team
 * @license GPL version 3
 * @version 1.0
 * @since 2009-08-27, version 1.0
 * @interface Mcmc
 * @package distributions
 *
 * $Id: RateMatrix_MtRev24.cpp 1921 2012-12-11 13:46:24Z hoehna $
 */

#include "RateMatrix_MtRev24.h"

#include <cstddef>
#include <vector>

#include "RbVectorUtilities.h"
#include "Cloneable.h"
#include "MatrixReal.h"
#include "RbVector.h"
#include "RbVectorImpl.h"


using namespace RevBayesCore;

/** Construct rate matrix with n states */
RateMatrix_MtRev24::RateMatrix_MtRev24( void ) : RateMatrix_Empirical( 20 ){
    
    MatrixReal &m = *the_rate_matrix;
    
    /* MtRev24 */	
    m[ 0][ 0] =   0.00; m[ 0][ 1] =  23.18; m[ 0][ 2] =  26.95; m[ 0][ 3] =  17.67; m[ 0][ 4] =  59.93;
	m[ 0][ 5] =   1.90; m[ 0][ 6] =   9.77; m[ 0][ 7] = 120.71; m[ 0][ 8] =  13.90; m[ 0][ 9] =  96.49;
	m[ 0][10] =  25.46; m[ 0][11] =   8.36; m[ 0][12] = 141.88; m[ 0][13] =   6.37; m[ 0][14] =  54.31;
	m[ 0][15] = 387.86; m[ 0][16] = 480.72; m[ 0][17] =   1.90; m[ 0][18] =   6.48; m[ 0][19] = 195.06;
	m[ 1][ 0] =  23.18; m[ 1][ 1] =   0.00; m[ 1][ 2] =  13.24; m[ 1][ 3] =   1.90; m[ 1][ 4] = 103.33;
	m[ 1][ 5] = 220.99; m[ 1][ 6] =   1.90; m[ 1][ 7] =  23.03; m[ 1][ 8] = 165.23; m[ 1][ 9] =   1.90;
	m[ 1][10] =  15.58; m[ 1][11] = 141.40; m[ 1][12] =   1.90; m[ 1][13] =   4.69; m[ 1][14] =  23.64;
	m[ 1][15] =   6.04; m[ 1][16] =   2.08; m[ 1][17] =  21.95; m[ 1][18] =   1.90; m[ 1][19] =   7.64;
	m[ 2][ 0] =  26.95; m[ 2][ 1] =  13.24; m[ 2][ 2] =   0.00; m[ 2][ 3] = 794.38; m[ 2][ 4] =  58.94;
	m[ 2][ 5] = 173.56; m[ 2][ 6] =  63.05; m[ 2][ 7] =  53.30; m[ 2][ 8] = 496.13; m[ 2][ 9] =  27.10;
	m[ 2][10] =  15.16; m[ 2][11] = 608.70; m[ 2][12] =  65.41; m[ 2][13] =  15.20; m[ 2][14] =  73.31;
	m[ 2][15] = 494.39; m[ 2][16] = 238.46; m[ 2][17] =  10.68; m[ 2][18] = 191.36; m[ 2][19] =   1.90;
	m[ 3][ 0] =  17.67; m[ 3][ 1] =   1.90; m[ 3][ 2] = 794.38; m[ 3][ 3] =   0.00; m[ 3][ 4] =   1.90;
	m[ 3][ 5] =  55.28; m[ 3][ 6] = 583.55; m[ 3][ 7] =  56.77; m[ 3][ 8] = 113.99; m[ 3][ 9] =   4.34;
	m[ 3][10] =   1.90; m[ 3][11] =   2.31; m[ 3][12] =   1.90; m[ 3][13] =   4.98; m[ 3][14] =  13.43;
	m[ 3][15] =  69.02; m[ 3][16] =  28.01; m[ 3][17] =  19.86; m[ 3][18] =  21.21; m[ 3][19] =   1.90;
	m[ 4][ 0] =  59.93; m[ 4][ 1] = 103.33; m[ 4][ 2] =  58.94; m[ 4][ 3] =   1.90; m[ 4][ 4] =   0.00;
	m[ 4][ 5] =  75.24; m[ 4][ 6] =   1.90; m[ 4][ 7] =  30.71; m[ 4][ 8] = 141.49; m[ 4][ 9] =  62.73;
	m[ 4][10] =  25.65; m[ 4][11] =   1.90; m[ 4][12] =   6.18; m[ 4][13] =  70.80; m[ 4][14] =  31.26;
	m[ 4][15] = 277.05; m[ 4][16] = 179.97; m[ 4][17] =  33.60; m[ 4][18] = 254.77; m[ 4][19] =   1.90;
	m[ 5][ 0] =   1.90; m[ 5][ 1] = 220.99; m[ 5][ 2] = 173.56; m[ 5][ 3] =  55.28; m[ 5][ 4] =  75.24;
	m[ 5][ 5] =   0.00; m[ 5][ 6] = 313.56; m[ 5][ 7] =   6.75; m[ 5][ 8] = 582.40; m[ 5][ 9] =   8.34;
	m[ 5][10] =  39.70; m[ 5][11] = 465.58; m[ 5][12] =  47.37; m[ 5][13] =  19.11; m[ 5][14] = 137.29;
	m[ 5][15] =  54.11; m[ 5][16] =  94.93; m[ 5][17] =   1.90; m[ 5][18] =  38.82; m[ 5][19] =  19.00;
	m[ 6][ 0] =   9.77; m[ 6][ 1] =   1.90; m[ 6][ 2] =  63.05; m[ 6][ 3] = 583.55; m[ 6][ 4] =   1.90;
	m[ 6][ 5] = 313.56; m[ 6][ 6] =   0.00; m[ 6][ 7] =  28.28; m[ 6][ 8] =  49.12; m[ 6][ 9] =   3.31;
	m[ 6][10] =   1.90; m[ 6][11] = 313.86; m[ 6][12] =   1.90; m[ 6][13] =   2.67; m[ 6][14] =  12.83;
	m[ 6][15] =  54.71; m[ 6][16] =  14.82; m[ 6][17] =   1.90; m[ 6][18] =  13.12; m[ 6][19] =  21.14;
	m[ 7][ 0] = 120.71; m[ 7][ 1] =  23.03; m[ 7][ 2] =  53.30; m[ 7][ 3] =  56.77; m[ 7][ 4] =  30.71;
	m[ 7][ 5] =   6.75; m[ 7][ 6] =  28.28; m[ 7][ 7] =   0.00; m[ 7][ 8] =   1.90; m[ 7][ 9] =   5.98;
	m[ 7][10] =   2.41; m[ 7][11] =  22.73; m[ 7][12] =   1.90; m[ 7][13] =   1.90; m[ 7][14] =   1.90;
	m[ 7][15] = 125.93; m[ 7][16] =  11.17; m[ 7][17] =  10.92; m[ 7][18] =   3.21; m[ 7][19] =   2.53;
	m[ 8][ 0] =  13.90; m[ 8][ 1] = 165.23; m[ 8][ 2] = 496.13; m[ 8][ 3] = 113.99; m[ 8][ 4] = 141.49;
	m[ 8][ 5] = 582.40; m[ 8][ 6] =  49.12; m[ 8][ 7] =   1.90; m[ 8][ 8] =   0.00; m[ 8][ 9] =  12.26;
	m[ 8][10] =  11.49; m[ 8][11] = 127.67; m[ 8][12] =  11.97; m[ 8][13] =  48.16; m[ 8][14] =  60.97;
	m[ 8][15] =  77.46; m[ 8][16] =  44.78; m[ 8][17] =   7.08; m[ 8][18] = 670.14; m[ 8][19] =   1.90;
	m[ 9][ 0] =  96.49; m[ 9][ 1] =   1.90; m[ 9][ 2] =  27.10; m[ 9][ 3] =   4.34; m[ 9][ 4] =  62.73;
	m[ 9][ 5] =   8.34; m[ 9][ 6] =   3.31; m[ 9][ 7] =   5.98; m[ 9][ 8] =  12.26; m[ 9][ 9] =   0.00;
	m[ 9][10] = 329.09; m[ 9][11] =  19.57; m[ 9][12] = 517.98; m[ 9][13] =  84.67; m[ 9][14] =  20.63;
	m[ 9][15] =  47.70; m[ 9][16] = 368.43; m[ 9][17] =   1.90; m[ 9][18] =  25.01; m[ 9][19] =1222.94;
	m[10][ 0] =  25.46; m[10][ 1] =  15.58; m[10][ 2] =  15.16; m[10][ 3] =   1.90; m[10][ 4] =  25.65;
	m[10][ 5] =  39.70; m[10][ 6] =   1.90; m[10][ 7] =   2.41; m[10][ 8] =  11.49; m[10][ 9] = 329.09;
	m[10][10] =   0.00; m[10][11] =  14.88; m[10][12] = 537.53; m[10][13] = 216.06; m[10][14] =  40.10;
	m[10][15] =  73.61; m[10][16] = 126.40; m[10][17] =  32.44; m[10][18] =  44.15; m[10][19] =  91.67;
	m[11][ 0] =   8.36; m[11][ 1] = 141.40; m[11][ 2] = 608.70; m[11][ 3] =   2.31; m[11][ 4] =   1.90;
	m[11][ 5] = 465.58; m[11][ 6] = 313.86; m[11][ 7] =  22.73; m[11][ 8] = 127.67; m[11][ 9] =  19.57;
	m[11][10] =  14.88; m[11][11] =   0.00; m[11][12] =  91.37; m[11][13] =   6.44; m[11][14] =  50.10;
	m[11][15] = 105.79; m[11][16] = 136.33; m[11][17] =  24.00; m[11][18] =  51.17; m[11][19] =   1.90;
	m[12][ 0] = 141.88; m[12][ 1] =   1.90; m[12][ 2] =  65.41; m[12][ 3] =   1.90; m[12][ 4] =   6.18;
	m[12][ 5] =  47.37; m[12][ 6] =   1.90; m[12][ 7] =   1.90; m[12][ 8] =  11.97; m[12][ 9] = 517.98;
	m[12][10] = 537.53; m[12][11] =  91.37; m[12][12] =   0.00; m[12][13] =  90.82; m[12][14] =  18.84;
	m[12][15] = 111.16; m[12][16] = 528.17; m[12][17] =  21.71; m[12][18] =  39.96; m[12][19] = 387.54;
	m[13][ 0] =   6.37; m[13][ 1] =   4.69; m[13][ 2] =  15.20; m[13][ 3] =   4.98; m[13][ 4] =  70.80;
	m[13][ 5] =  19.11; m[13][ 6] =   2.67; m[13][ 7] =   1.90; m[13][ 8] =  48.16; m[13][ 9] =  84.67;
	m[13][10] = 216.06; m[13][11] =   6.44; m[13][12] =  90.82; m[13][13] =   0.00; m[13][14] =  17.31;
	m[13][15] =  64.29; m[13][16] =  33.85; m[13][17] =   7.84; m[13][18] = 465.58; m[13][19] =   6.35;
	m[14][ 0] =  54.31; m[14][ 1] =  23.64; m[14][ 2] =  73.31; m[14][ 3] =  13.43; m[14][ 4] =  31.26;
	m[14][ 5] = 137.29; m[14][ 6] =  12.83; m[14][ 7] =   1.90; m[14][ 8] =  60.97; m[14][ 9] =  20.63;
	m[14][10] =  40.10; m[14][11] =  50.10; m[14][12] =  18.84; m[14][13] =  17.31; m[14][14] =   0.00;
	m[14][15] = 169.90; m[14][16] = 128.22; m[14][17] =   4.21; m[14][18] =  16.21; m[14][19] =   8.23;
	m[15][ 0] = 387.86; m[15][ 1] =   6.04; m[15][ 2] = 494.39; m[15][ 3] =  69.02; m[15][ 4] = 277.05;
	m[15][ 5] =  54.11; m[15][ 6] =  54.71; m[15][ 7] = 125.93; m[15][ 8] =  77.46; m[15][ 9] =  47.70;
	m[15][10] =  73.61; m[15][11] = 105.79; m[15][12] = 111.16; m[15][13] =  64.29; m[15][14] = 169.90;
	m[15][15] =   0.00; m[15][16] = 597.21; m[15][17] =  38.58; m[15][18] =  64.92; m[15][19] =   1.90;
	m[16][ 0] = 480.72; m[16][ 1] =   2.08; m[16][ 2] = 238.46; m[16][ 3] =  28.01; m[16][ 4] = 179.97;
	m[16][ 5] =  94.93; m[16][ 6] =  14.82; m[16][ 7] =  11.17; m[16][ 8] =  44.78; m[16][ 9] = 368.43;
	m[16][10] = 126.40; m[16][11] = 136.33; m[16][12] = 528.17; m[16][13] =  33.85; m[16][14] = 128.22;
	m[16][15] = 597.21; m[16][16] =   0.00; m[16][17] =   9.99; m[16][18] =  38.73; m[16][19] = 204.54;
	m[17][ 0] =   1.90; m[17][ 1] =  21.95; m[17][ 2] =  10.68; m[17][ 3] =  19.86; m[17][ 4] =  33.60;
	m[17][ 5] =   1.90; m[17][ 6] =   1.90; m[17][ 7] =  10.92; m[17][ 8] =   7.08; m[17][ 9] =   1.90;
	m[17][10] =  32.44; m[17][11] =  24.00; m[17][12] =  21.71; m[17][13] =   7.84; m[17][14] =   4.21;
	m[17][15] =  38.58; m[17][16] =   9.99; m[17][17] =   0.00; m[17][18] =  26.25; m[17][19] =   5.37;
	m[18][ 0] =   6.48; m[18][ 1] =   1.90; m[18][ 2] = 191.36; m[18][ 3] =  21.21; m[18][ 4] = 254.77;
	m[18][ 5] =  38.82; m[18][ 6] =  13.12; m[18][ 7] =   3.21; m[18][ 8] = 670.14; m[18][ 9] =  25.01;
	m[18][10] =  44.15; m[18][11] =  51.17; m[18][12] =  39.96; m[18][13] = 465.58; m[18][14] =  16.21;
	m[18][15] =  64.92; m[18][16] =  38.73; m[18][17] =  26.25; m[18][18] =   0.00; m[18][19] =   1.90;
	m[19][ 0] = 195.06; m[19][ 1] =   7.64; m[19][ 2] =   1.90; m[19][ 3] =   1.90; m[19][ 4] =   1.90;
	m[19][ 5] =  19.00; m[19][ 6] =  21.14; m[19][ 7] =   2.53; m[19][ 8] =   1.90; m[19][ 9] =1222.94;
	m[19][10] =  91.67; m[19][11] =   1.90; m[19][12] = 387.54; m[19][13] =   6.35; m[19][14] =   8.23;
	m[19][15] =   1.90; m[19][16] = 204.54; m[19][17] =   5.37; m[19][18] =   1.90; m[19][19] =   0.00;
    
	stationary_freqs[ 0] = 0.072;
	stationary_freqs[ 1] = 0.019;
	stationary_freqs[ 2] = 0.039;
	stationary_freqs[ 3] = 0.019;
	stationary_freqs[ 4] = 0.006;
	stationary_freqs[ 5] = 0.025;
	stationary_freqs[ 6] = 0.024;
	stationary_freqs[ 7] = 0.056;
	stationary_freqs[ 8] = 0.028;
	stationary_freqs[ 9] = 0.088;
	stationary_freqs[10] = 0.168;
	stationary_freqs[11] = 0.023;
	stationary_freqs[12] = 0.054;
	stationary_freqs[13] = 0.061;
	stationary_freqs[14] = 0.054;
	stationary_freqs[15] = 0.072;
	stationary_freqs[16] = 0.086;
	stationary_freqs[17] = 0.029;
	stationary_freqs[18] = 0.033;
	stationary_freqs[19] = 0.043;
    
    VectorUtilities::normalize(stationary_freqs);

    // multiply stationary frequencies into exchangeability matrix
    for (size_t i = 0; i < 20; i++)
    {
        for (size_t j = 0; j < 20; j++)
        {
            m[i][j] *= stationary_freqs[j];
        }
    }
    
    
    // set the diagonal values
    setDiagonal();
    
    // rescale 
    rescaleToAverageRate( 1.0 );
    
    // update the eigensystem
    updateEigenSystem();
    
}


/** Destructor */
RateMatrix_MtRev24::~RateMatrix_MtRev24(void) {
    
}




RateMatrix_MtRev24* RateMatrix_MtRev24::clone( void ) const {
    return new RateMatrix_MtRev24( *this );
}


